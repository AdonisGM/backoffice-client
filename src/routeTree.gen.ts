/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as appLayoutRouteImport } from './routes/(app)/_layout'
import { Route as appLayoutDashboardRouteImport } from './routes/(app)/_layout.dashboard'
import { Route as appLayoutBusinessPolicyPolicyRouteImport } from './routes/(app)/_layout.business/policy/policy'
import { Route as appLayoutBusinessPolicyComboFeeRouteImport } from './routes/(app)/_layout.business/policy/combo-fee'

const appRouteImport = createFileRoute('/(app)')()

const appRoute = appRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const appLayoutRoute = appLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => appRoute,
} as any)
const appLayoutDashboardRoute = appLayoutDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => appLayoutRoute,
} as any)
const appLayoutBusinessPolicyPolicyRoute =
  appLayoutBusinessPolicyPolicyRouteImport.update({
    id: '/business/policy/policy',
    path: '/business/policy/policy',
    getParentRoute: () => appLayoutRoute,
  } as any)
const appLayoutBusinessPolicyComboFeeRoute =
  appLayoutBusinessPolicyComboFeeRouteImport.update({
    id: '/business/policy/combo-fee',
    path: '/business/policy/combo-fee',
    getParentRoute: () => appLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof appLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard': typeof appLayoutDashboardRoute
  '/business/policy/combo-fee': typeof appLayoutBusinessPolicyComboFeeRoute
  '/business/policy/policy': typeof appLayoutBusinessPolicyPolicyRoute
}
export interface FileRoutesByTo {
  '/': typeof appLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard': typeof appLayoutDashboardRoute
  '/business/policy/combo-fee': typeof appLayoutBusinessPolicyComboFeeRoute
  '/business/policy/policy': typeof appLayoutBusinessPolicyPolicyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/(app)': typeof appRouteWithChildren
  '/(app)/_layout': typeof appLayoutRouteWithChildren
  '/(app)/_layout/dashboard': typeof appLayoutDashboardRoute
  '/(app)/_layout/business/policy/combo-fee': typeof appLayoutBusinessPolicyComboFeeRoute
  '/(app)/_layout/business/policy/policy': typeof appLayoutBusinessPolicyPolicyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/dashboard'
    | '/business/policy/combo-fee'
    | '/business/policy/policy'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/dashboard'
    | '/business/policy/combo-fee'
    | '/business/policy/policy'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/(app)'
    | '/(app)/_layout'
    | '/(app)/_layout/dashboard'
    | '/(app)/_layout/business/policy/combo-fee'
    | '/(app)/_layout/business/policy/policy'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  appRoute: typeof appRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/_layout': {
      id: '/(app)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appLayoutRouteImport
      parentRoute: typeof appRoute
    }
    '/(app)/_layout/dashboard': {
      id: '/(app)/_layout/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof appLayoutDashboardRouteImport
      parentRoute: typeof appLayoutRoute
    }
    '/(app)/_layout/business/policy/policy': {
      id: '/(app)/_layout/business/policy/policy'
      path: '/business/policy/policy'
      fullPath: '/business/policy/policy'
      preLoaderRoute: typeof appLayoutBusinessPolicyPolicyRouteImport
      parentRoute: typeof appLayoutRoute
    }
    '/(app)/_layout/business/policy/combo-fee': {
      id: '/(app)/_layout/business/policy/combo-fee'
      path: '/business/policy/combo-fee'
      fullPath: '/business/policy/combo-fee'
      preLoaderRoute: typeof appLayoutBusinessPolicyComboFeeRouteImport
      parentRoute: typeof appLayoutRoute
    }
  }
}

interface appLayoutRouteChildren {
  appLayoutDashboardRoute: typeof appLayoutDashboardRoute
  appLayoutBusinessPolicyComboFeeRoute: typeof appLayoutBusinessPolicyComboFeeRoute
  appLayoutBusinessPolicyPolicyRoute: typeof appLayoutBusinessPolicyPolicyRoute
}

const appLayoutRouteChildren: appLayoutRouteChildren = {
  appLayoutDashboardRoute: appLayoutDashboardRoute,
  appLayoutBusinessPolicyComboFeeRoute: appLayoutBusinessPolicyComboFeeRoute,
  appLayoutBusinessPolicyPolicyRoute: appLayoutBusinessPolicyPolicyRoute,
}

const appLayoutRouteWithChildren = appLayoutRoute._addFileChildren(
  appLayoutRouteChildren,
)

interface appRouteChildren {
  appLayoutRoute: typeof appLayoutRouteWithChildren
}

const appRouteChildren: appRouteChildren = {
  appLayoutRoute: appLayoutRouteWithChildren,
}

const appRouteWithChildren = appRoute._addFileChildren(appRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  appRoute: appRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
